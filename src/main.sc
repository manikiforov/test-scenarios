
theme: /

    state: newNode_0
        if: $session.transition
            go!: /newNode_80
        else:
            go!: /newNode_78

    state: newNode_80
        random:
            a:  –ü—Ä–∏–≤–µ—Ç! üôÇ
                –Ø —Ä–æ–±–æ—Ç-—Ä–µ–∫—Ä—É—Ç–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –õ‚Äô–≠—Ç—É–∞–ª—å - –∫—Ä—É–ø–Ω–æ–π —Å–µ—Ç–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏ –∏ –∫–æ—Å–º–µ—Ç–∏–∫–∏!
                –ú—ã –ø—Ä–∏–≥–ª–∞—à–∞–µ–º —Ç–µ—Ö, –∫–æ–º—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ —Ä–∞–±–æ—Ç–∞ –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π —Ä–æ—Å–∫–æ—à–∏ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞ —Å –∫—É–ª—å—Ç–æ–≤—ã–º–∏ —Ç–≤–æ—Ä–µ–Ω–∏—è–º–∏ –º–∏—Ä–æ–≤—ã—Ö –±—Ä–µ–Ω–¥–æ–≤  –∏ –Ω–æ–≤–∏–Ω–∫–∞–º–∏ –º–∞–∫–∏—è–∂–∞, —É—Ö–æ–¥–∞ –∑–∞ –∫–æ–∂–µ–π –∏ –∞—Ä–æ–º–∞—Ç–æ–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥–∞–≤—Ü–∞-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –≤ –Ω–æ–≤—ã–π —Ñ–ª–∞–≥–º–∞–Ω—Å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω –≤ –¢–¶ –ê–≤–∏–∞–ø–∞—Ä–∫ (–º. –¶–°–ö–ê).
        go!: /newNode_81
    @Transition
        {
          "boundsTo" : "/newNode_80",
          "then" : "/newNode_106"
        }
    state: newNode_81
        go!: /newNode_106

    state: newNode_78
        random:
            a:  –ü—Ä–∏–≤–µ—Ç! üôÇ
                –Ø —Ä–æ–±–æ—Ç-—Ä–µ–∫—Ä—É—Ç–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –õ‚Äô–≠—Ç—É–∞–ª—å - –∫—Ä—É–ø–Ω–æ–π —Å–µ—Ç–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏ –∏ –∫–æ—Å–º–µ—Ç–∏–∫–∏!
                –ú—ã –ø—Ä–∏–≥–ª–∞—à–∞–µ–º —Ç–µ—Ö, –∫–æ–º—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ —Ä–∞–±–æ—Ç–∞ –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π —Ä–æ—Å–∫–æ—à–∏ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞ —Å –∫—É–ª—å—Ç–æ–≤—ã–º–∏ —Ç–≤–æ—Ä–µ–Ω–∏—è–º–∏ –º–∏—Ä–æ–≤—ã—Ö –±—Ä–µ–Ω–¥–æ–≤  –∏ –Ω–æ–≤–∏–Ω–∫–∞–º–∏ –º–∞–∫–∏—è–∂–∞, —É—Ö–æ–¥–∞ –∑–∞ –∫–æ–∂–µ–π –∏ –∞—Ä–æ–º–∞—Ç–æ–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥–∞–≤—Ü–∞-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –≤ –Ω–æ–≤—ã–π —Ñ–ª–∞–≥–º–∞–Ω—Å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω –≤ –¢–¶ –ê–≤–∏–∞–ø–∞—Ä–∫ (–º. –¶–°–ö–ê).
        random:
            a:  –•–æ—á–µ—à—å —Ö–æ—Ä–æ—à–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –∫–∞–∂–¥–æ–µ –ª–µ—Ç–æ –ø–æ—Å–µ—â–∞—Ç—å –ü–∞—Ä–∏–∂ –∑–∞ —Å—á–µ—Ç –ö–æ–º–ø–∞–Ω–∏–∏ –∏ —Å—Ç–∞—Ç—å –∫–ª–∞—Å—Å–Ω—ã–º Beauty-—ç–∫—Å–ø–µ—Ä—Ç–æ–º?
                –¢–æ–≥–¥–∞ —Ç–µ–±–µ —Ç–æ—á–Ω–æ –∫ –Ω–∞–º!
        random:
            a:  –Ø —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –æ–± —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —Ä–∞–±–æ—Ç—ã –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∑–∞–ø–∏—à—É —Ç–µ–±—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ üòâ
                –¢—ã –≥–æ—Ç–æ–≤–∞ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –ø—Ä–æ–¥–∞–≤—Ü–∞-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –≤ –¢–¶ –ê–≤–∏–∞–ø–∞—Ä–∫?
        go!: /newNode_79
    @IntentGroup
        {
          "boundsTo" : "/newNode_78",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [
                {
                  "name" : "–î–∞",
                  "transition" : "/newNode_2"
                },
                {
                  "name" : "–ù–µ—Ç",
                  "transition" : "/newNode_1"
                }
              ]
            }
          ],
          "global" : false,
          "fallback" : "/newNode_78",
          "intents" : [
            {
              "phrases" : [
                {
                  "type" : "example",
                  "value" : "–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"
                },
                {
                  "type" : "example",
                  "value" : "–î–∞, –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å–∞–º"
                },
                {
                  "type" : "example",
                  "value" : "–ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å–∞–º"
                },
                {
                  "type" : "example",
                  "value" : "–¥–∞"
                },
                {
                  "type" : "example",
                  "value" : "–¥–∞ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å–∞–º"
                },
                {
                  "type" : "example",
                  "value" : "—Å–æ–≥–ª–∞—Å–Ω–∞"
                },
                {
                  "type" : "pattern",
                  "value" : "–î–∞–ª—å—à–µ"
                },
                {
                  "type" : "pattern",
                  "value" : "–î–∞–ª–µ–µ"
                }
              ],
              "then" : "/newNode_2"
            },
            {
              "phrases" : [
                {
                  "type" : "example",
                  "value" : "–ù–µ—Ç, –º–Ω–µ –Ω–µ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"
                },
                {
                  "type" : "example",
                  "value" : "–Ω–µ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"
                },
                {
                  "type" : "example",
                  "value" : "–Ω–µ—Ç"
                },
                {
                  "type" : "example",
                  "value" : "–Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"
                },
                {
                  "type" : "example",
                  "value" : "–Ω–µ —Ö–æ—á—É"
                }
              ],
              "then" : "/newNode_1"
            }
          ]
        }
    state: newNode_79
        state: 1
            e: –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
            e: –î–∞, –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å–∞–º
            e: –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å–∞–º
            e: –¥–∞
            e: –¥–∞ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å–∞–º
            e: —Å–æ–≥–ª–∞—Å–Ω–∞
            q: –î–∞–ª—å—à–µ
            q: –î–∞–ª–µ–µ

            go!: /newNode_2

        state: 2
            e: –ù–µ—Ç, –º–Ω–µ –Ω–µ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ
            e: –Ω–µ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ
            e: –Ω–µ—Ç
            e: –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ
            e: –Ω–µ —Ö–æ—á—É

            go!: /newNode_1

        state: Fallback
            q: *
            go!: /newNode_78
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_79",
                name: "newNode_79 buttons",
                handler: function($context) {
                  $reactions.buttons([
                    {text: "–î–∞"
                    , transition: "/newNode_2"
                    },
                    {text: "–ù–µ—Ç"
                    , transition: "/newNode_1"
                    },
                  ]);
                }
            });

    state: newNode_2
        random:
            a:  –ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç:
                - –∑–∞—â–∏—â–µ–Ω–Ω–æ—Å—Ç—å, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º –¥–Ω–µ
                - –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¢–ö –†–§
                - –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã 2/2
                - –§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø –°–¢–ê–í–ö–ê 50 000 + % –û–¢ –õ–ò–ß–ù–´–• –ü–†–û–î–ê–ñ
                –°–†–ï–î–ù–ò–ô –î–û–•–û–î –æ—Ç 80 000 —Ç—ã—Å. —Ä—É–±–ª–µ–π. –≤ –º–µ—Å—è—Ü. –í–µ—Å—å –¥–æ—Ö–æ–¥ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π.
                - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –æ–±–µ–¥—ã –∏ –∫–æ—Ñ–µ-–±—Ä–µ–π–∫–∏
                - –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: –Ω–æ–≤—ã–π —Ñ–ª–∞–≥–º–∞–Ω—Å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω –≤ –¢–¶ "–ê–≤–∏–∞–ø–∞—Ä–∫"
        random:
            a:  - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞ —Å—á–µ—Ç –ö–æ–º–ø–∞–Ω–∏–∏
                - –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏ –ø—Ä–µ—Å—Ç–∏–∂–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤
                - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
                - —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
                –ü–û–ï–ó–î–ö–ê –í –ü–ê–†–ò–ñ –ö–ê–ñ–î–´–ô –ì–û–î –ó–ê –°–ß–ï–¢ –ö–û–ú–ü–ê–ù–ò–ò! üóº
        random:
            a:  –ú—ã –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–≤–æ–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ –õ‚Äô–≠—Ç—É–∞–ª—å –∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —à–∞–Ω—Å–æ–º –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å —Å–≤–æ–∏ –º–µ—á—Ç—ã! üòâ
                –û—Ç–≤–µ—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –≠—Ç–æ –Ω–µ –∑–∞–π–º–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
        go!: /newNode_10
    @IntentGroup
        {
          "boundsTo" : "/newNode_2",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [
                {
                  "name" : "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã",
                  "transition" : "/newNode_106"
                }
              ]
            }
          ],
          "global" : false,
          "fallback" : "/newNode_2",
          "intents" : [
            {
              "phrases" : [
                {
                  "type" : "example",
                  "value" : "–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"
                },
                {
                  "type" : "example",
                  "value" : "–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
                },
                {
                  "type" : "example",
                  "value" : "–ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å–∞–º"
                },
                {
                  "type" : "example",
                  "value" : "–∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã"
                },
                {
                  "type" : "pattern",
                  "value" : "–¥–∞–ª–µ–µ"
                },
                {
                  "type" : "pattern",
                  "value" : "–¥–∞–ª—å—à–µ"
                },
                {
                  "type" : "example",
                  "value" : "–≤–æ–ø—Ä–æ—Å—ã"
                }
              ],
              "then" : "/newNode_106"
            }
          ]
        }
    state: newNode_10
        state: 1
            e: –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
            e: –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É
            e: –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å–∞–º
            e: –∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
            e: –≤–æ–ø—Ä–æ—Å—ã
            q: –¥–∞–ª–µ–µ
            q: –¥–∞–ª—å—à–µ

            go!: /newNode_106

        state: Fallback
            q: *
            go!: /newNode_2
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_10",
                name: "newNode_10 buttons",
                handler: function($context) {
                  $reactions.buttons([
                    {text: "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"
                    , transition: "/newNode_106"
                    },
                  ]);
                }
            });

    state: newNode_1
        random:
            a:  –Ø –ø–æ–Ω—è–ª, –æ—á–µ–Ω—å –∂–∞–ª—å!
                –ú–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ —Ç–µ–±–µ –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ. –£–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–∞—Ö —Ä–∞–±–æ—Ç—ã –º–µ—á—Ç—ã!
        go!: /newNode_6
    @IntentGroup
        {
          "boundsTo" : "/newNode_1",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [
                {
                  "name" : "–ò –≤—Å–µ-—Ç–∞–∫–∏ –î–ê üòâ",
                  "transition" : "/newNode_2"
                }
              ]
            }
          ],
          "global" : false,
          "fallback" : "",
          "intents" : [
            {
              "phrases" : [
                {
                  "type" : "example",
                  "value" : "–ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å–∞–º"
                },
                {
                  "type" : "example",
                  "value" : "–µ—â–µ —Ä–∞–∑"
                },
                {
                  "type" : "example",
                  "value" : "–≤–∞–∫–∞–Ω—Å–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞"
                },
                {
                  "type" : "example",
                  "value" : "–≤–µ—Ä–Ω—É—Ç—å—Å—è"
                },
                {
                  "type" : "example",
                  "value" : "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"
                },
                {
                  "type" : "example",
                  "value" : "—Ö–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å"
                }
              ],
              "then" : "/newNode_2"
            }
          ]
        }
    state: newNode_6
        state: 1
            e: –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å–∞–º
            e: –µ—â–µ —Ä–∞–∑
            e: –≤–∞–∫–∞–Ω—Å–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞
            e: –≤–µ—Ä–Ω—É—Ç—å—Å—è
            e: –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ
            e: —Ö–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å

            go!: /newNode_2
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_6",
                name: "newNode_6 buttons",
                handler: function($context) {
                  $reactions.buttons([
                    {text: "–ò –≤—Å–µ-—Ç–∞–∫–∏ –î–ê üòâ"
                    , transition: "/newNode_2"
                    },
                  ]);
                }
            });
    @InputText
        {
          "boundsTo" : "",
          "title" : "–§–ò–û",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [ ]
            }
          ],
          "prompt" : "–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é üôÇ",
          "varName" : "name",
          "then" : "/newNode_73"
        }
    state: newNode_106 || modal = true
        a: –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é üôÇ

        state: CatchText
            q: *
            script:
                $session.name = $parseTree.text;
            go!: /newNode_73
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_106",
                name: "newNode_106 buttons",
                handler: function($context) {
                }
            });

    state: newNode_15
        random:
            a: –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {{$session.name.firstName}}! üòâ
        go!: /newNode_130
    @InputPhoneNumber
        {
          "boundsTo" : "/newNode_15",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [ ]
            }
          ],
          "prompt" : "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ —Ç–µ–±—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 89998887766 üì≤",
          "varName" : "phone",
          "failureMessage" : [
            "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑ üôÇ"
          ],
          "then" : "/newNode_95"
        }
    state: newNode_130
        a: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ —Ç–µ–±—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 89998887766 üì≤

        state: CatchPhoneNumber
            q: $mobilePhoneNumber
            script:
                $session.phone = $parseTree._mobilePhoneNumber;
            go!: /newNode_95

        state: WrongPhoneNumber
            script:
                var failureMessages = [
                    "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑ üôÇ"
                ];
                $temp.failureRandom = failureMessages[$reactions.random(failureMessages.length)];
                $reactions.answer($temp.failureRandom);
            go: ../CatchPhoneNumber

        state: CatchAll
            q: *
            go!: ../WrongPhoneNumber
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_130",
                name: "newNode_130 buttons",
                handler: function($context) {
                }
            });

    state: newNode_95
        if: $session.phone
            go!: /newNode_98
        else:
            go!: /newNode_96

    state: newNode_98
        random:
            a: –•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –º—ã –±—É–¥–µ–º –Ω–∞ —Å–≤—è–∑–∏. –ò–¥–µ–º –¥–∞–ª—å—à–µ üòâ
        go!: /newNode_101
    @Transition
        {
          "boundsTo" : "/newNode_98",
          "then" : "/newNode_97"
        }
    state: newNode_101
        go!: /newNode_97

    state: newNode_97
        random:
            a: –£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –ø–æ–ª.
        go!: /newNode_102
    @IntentGroup
        {
          "boundsTo" : "/newNode_97",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [
                {
                  "name" : "–ñ–µ–Ω—Å–∫–∏–π",
                  "transition" : ""
                },
                {
                  "name" : "–ú—É–∂—Å–∫–æ–π",
                  "transition" : ""
                }
              ]
            }
          ],
          "global" : false,
          "fallback" : "/newNode_97",
          "intents" : [
            {
              "phrases" : [
                {
                  "type" : "example",
                  "value" : "$sex"
                }
              ],
              "then" : "/newNode_131"
            }
          ]
        }
    state: newNode_102
        state: 1
            e: $sex

            go!: /newNode_131

        state: Fallback
            q: *
            go!: /newNode_97
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_102",
                name: "newNode_102 buttons",
                handler: function($context) {
                  $reactions.buttons([
                    {text: "–ñ–µ–Ω—Å–∫–∏–π"
                    },
                    {text: "–ú—É–∂—Å–∫–æ–π"
                    },
                  ]);
                }
            });

    state: newNode_18
        random:
            a: –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤—ë—à—å?
        go!: /newNode_21
    @IntentGroup
        {
          "boundsTo" : "/newNode_18",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [ ]
            }
          ],
          "global" : false,
          "fallback" : "/newNode_18",
          "intents" : [
            {
              "phrases" : [
                {
                  "type" : "example",
                  "value" : "$city"
                }
              ],
              "then" : "/newNode_140"
            },
            {
              "phrases" : [
                {
                  "type" : "example",
                  "value" : "$CITY::city"
                }
              ],
              "then" : "/newNode_140"
            }
          ]
        }
    state: newNode_21
        state: 1
            e: $city

            go!: /newNode_140

        state: 2
            e: $CITY::city

            go!: /newNode_140

        state: Fallback
            q: *
            go!: /newNode_18
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_21",
                name: "newNode_21 buttons",
                handler: function($context) {
                }
            });

    state: newNode_23
        random:
            a: –ö–∞–∫–æ–µ —É —Ç–µ–±—è –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ?
        go!: /newNode_24
    @IntentGroup
        {
          "boundsTo" : "/newNode_23",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [
                {
                  "name" : "–†–æ—Å—Å–∏—è",
                  "transition" : ""
                },
                {
                  "name" : "–î—Ä—É–≥–æ–µ",
                  "transition" : ""
                }
              ]
            }
          ],
          "global" : false,
          "fallback" : "/newNode_23",
          "intents" : [
            {
              "phrases" : [
                {
                  "type" : "example",
                  "value" : "$citizenship"
                }
              ],
              "then" : "/newNode_146"
            }
          ]
        }
    state: newNode_24
        state: 1
            e: $citizenship

            go!: /newNode_146

        state: Fallback
            q: *
            go!: /newNode_23
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_24",
                name: "newNode_24 buttons",
                handler: function($context) {
                  $reactions.buttons([
                    {text: "–†–æ—Å—Å–∏—è"
                    },
                    {text: "–î—Ä—É–≥–æ–µ"
                    },
                  ]);
                }
            });
    @InputNumber
        {
          "boundsTo" : "",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [ ]
            }
          ],
          "prompt" : "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
          "varName" : "age",
          "failureMessage" : [
            "–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ü–∏—Ñ—Ä–æ–π —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, 18."
          ],
          "then" : "/newNode_99",
          "minValue" : 14,
          "maxValue" : 100
        }
    state: newNode_85
        a: –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?

        state: CatchNumber
            q: $Number
            script:
                var failureMessages = [
                    "–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ü–∏—Ñ—Ä–æ–π —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, 18."
                ];
                var failureRandom = failureMessages[$reactions.random(failureMessages.length)];
                if ($parseTree._Number < 14) {
                    $reactions.answer(failureRandom);
                } else
                if ($parseTree._Number > 100) {
                    $reactions.answer(failureRandom);
                } else
                {
                    $session.age = $parseTree._Number;
                    $temp.age_ok = true;
                }
            if: $temp.age_ok
                go!: /newNode_99
            else:
                go: CatchNumber

        state: CatchAll
            q: *
            go!: ..
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_85",
                name: "newNode_85 buttons",
                handler: function($context) {
                }
            });

    state: newNode_99
        if: $session.sex && $session.sex === "–ñ–µ–Ω—Å–∫–∏–π"
            go!: /newNode_148
        else:
            go!: /newNode_134

    state: newNode_148
        random:
            a:  –í –õ‚Äô–≠—Ç—É–∞–ª—å —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ–ª—å—à–∏–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –æ–±—â–∞—Ç—å—Å—è —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏ –∏ –ø–æ–º–æ–≥–∞—Ç—å –∏–º —Å–¥–µ–ª–∞—Ç—å —Å–∞–º—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä. üòä
                –¢–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –º–∏—Ä –∫–æ—Å–º–µ—Ç–∏–∫–∏, –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏ –∏ –∫—Ä–∞—Å–æ—Ç—ã, —Ç—ã –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞?
        go!: /newNode_105
    @IntentGroup
        {
          "boundsTo" : "/newNode_148",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [
                {
                  "name" : "–î–∞",
                  "transition" : ""
                },
                {
                  "name" : "–ù–µ—Ç",
                  "transition" : ""
                }
              ]
            }
          ],
          "global" : false,
          "fallback" : "/newNode_148",
          "intents" : [
            {
              "phrases" : [
                {
                  "type" : "example",
                  "value" : "$ready"
                }
              ],
              "then" : "/newNode_133"
            },
            {
              "phrases" : [
                {
                  "type" : "pattern",
                  "value" : "–¥–∞–ª–µ–µ"
                },
                {
                  "type" : "pattern",
                  "value" : "–¥–∞–ª—å—à–µ"
                }
              ],
              "then" : "/newNode_148"
            }
          ]
        }
    state: newNode_105
        state: 1
            e: $ready

            go!: /newNode_133

        state: 2
            q: –¥–∞–ª–µ–µ
            q: –¥–∞–ª—å—à–µ

            go!: /newNode_148

        state: Fallback
            q: *
            go!: /newNode_148
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_105",
                name: "newNode_105 buttons",
                handler: function($context) {
                  $reactions.buttons([
                    {text: "–î–∞"
                    },
                    {text: "–ù–µ—Ç"
                    },
                  ]);
                }
            });

    state: newNode_120
        random:
            a:  {{$session.name.firstName}}, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ —É–¥–µ–ª–∏–ª–∞ –º–Ω–µ –≤—Ä–µ–º—è –∏ –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã. üôÇ
                –ú—ã –ø—Ä–∏–≥–ª–∞—à–∞–µ–º —Ç–µ–±—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ.
                –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É –≤ 11:00 –∏ –≤ 14:00 (–≤—Ä–µ–º—è –º–æ—Å–∫–æ–≤—Å–∫–æ–µ).
        go!: /newNode_121
    @Transition
        {
          "boundsTo" : "/newNode_120",
          "then" : "/newNode_59"
        }
    state: newNode_121
        go!: /newNode_59

    state: newNode_59
        if: $session.datePoints = 10
            go!: /newNode_60
        else:
            go!: /newNode_60

    state: newNode_60
        if: $session.formattedDates && $session.formattedDates.length > 0
            go!: /newNode_57
        else:
            go!: /newNode_57

    state: newNode_134
        random:
            a:  {{$session.name.firstName}}, —Å–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã!
                –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –í —Å–ª—É—á–∞–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π! üôÇ
        go!: /newNode_123
    @IntentGroup
        {
          "boundsTo" : "/newNode_134",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [ ]
            }
          ],
          "global" : false,
          "fallback" : "",
          "intents" : [
            {
              "phrases" : [
                {
                  "type" : "pattern",
                  "value" : "*"
                }
              ],
              "then" : "/newNode_92"
            }
          ]
        }
    state: newNode_123
        state: 1
            q: *

            go!: /newNode_92
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_123",
                name: "newNode_123 buttons",
                handler: function($context) {
                }
            });

    state: newNode_118
        if: $session.date && $session.parsedDate
            go!: /newNode_65
        elseif: $session.parsedDate
            go!: /newNode_61
        else:
            go!: /newNode_62

    state: newNode_57
        random:
            a:  –°–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–∞—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π.
                –í–≤–µ–¥–∏ –ø–æ—Ä—è–¥–∫–æ–≤—É—é —Ü–∏—Ñ—Ä—É –¥–∞—Ç—ã, –∫–æ—Ç–æ—Ä–∞—è —É–¥–æ–±–Ω–∞ —Ç–µ–±–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, 1: {{$session.formattedDates}}
        go!: /newNode_132
    @IntentGroup
        {
          "boundsTo" : "/newNode_57",
          "actions" : [ ],
          "global" : false,
          "fallback" : "/newNode_57",
          "intents" : [
            {
              "phrases" : [
                {
                  "type" : "pattern",
                  "value" : "$TEXT::date"
                }
              ],
              "then" : "/newNode_118"
            }
          ]
        }
    state: newNode_132
        state: 1
            q: $TEXT::date

            go!: /newNode_118

        state: Fallback
            q: *
            go!: /newNode_57

    state: newNode_65
        random:
            a:  –í–≤–µ–¥–∏ –ø–æ—Ä—è–¥–∫–æ–≤—É—é —Ü–∏—Ñ—Ä—É —É–¥–æ–±–Ω–æ–≥–æ –¥–ª—è —Ç–µ–±—è –≤—Ä–µ–º–µ–Ω–∏\–∏–ª–∏ –≤–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—É 0 –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã:
                {{$session.formattedTimeDict[$session.date]}}
        go!: /newNode_66
    @IntentGroup
        {
          "boundsTo" : "/newNode_65",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [
                {
                  "name" : "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã",
                  "transition" : "/newNode_57"
                }
              ]
            }
          ],
          "global" : false,
          "fallback" : "/newNode_65",
          "intents" : [
            {
              "phrases" : [
                {
                  "type" : "pattern",
                  "value" : " $TEXT::time"
                }
              ],
              "then" : "/newNode_67"
            },
            {
              "phrases" : [
                {
                  "type" : "example",
                  "value" : "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"
                }
              ],
              "then" : "/newNode_57"
            },
            {
              "phrases" : [
                {
                  "type" : "pattern",
                  "value" : "0"
                }
              ],
              "then" : "/newNode_57"
            }
          ]
        }
    state: newNode_66
        state: 1
            q:  $TEXT::time

            go!: /newNode_67

        state: 2
            e: –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã

            go!: /newNode_57

        state: 3
            q: 0

            go!: /newNode_57

        state: Fallback
            q: *
            go!: /newNode_65
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_66",
                name: "newNode_66 buttons",
                handler: function($context) {
                  $reactions.buttons([
                    {text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"
                    , transition: "/newNode_57"
                    },
                  ]);
                }
            });

    state: newNode_67
        if: $session.time && $session.parsedTime
            go!: /newNode_74
        elseif: $session.parsedTime
            go!: /newNode_68
        else:
            go!: /newNode_70

    state: newNode_74
        if: $session.job_interview
            go!: /newNode_77
        else:
            go!: /newNode_75

    state: newNode_91
        random:
            a: –ú–Ω–µ –±—ã–ª–æ –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è! –ñ–µ–ª–∞—é —É—Å–ø–µ—Ö–æ–≤ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏!
        go!: /newNode_94
    @IntentGroup
        {
          "boundsTo" : "/newNode_91",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [ ]
            }
          ],
          "global" : false,
          "fallback" : "/newNode_91",
          "intents" : [
            {
              "phrases" : [
                {
                  "type" : "example",
                  "value" : "—Å–ø–∞—Å–∏–±–æ"
                }
              ],
              "then" : "/newNode_179"
            },
            {
              "phrases" : [
                {
                  "type" : "example",
                  "value" : "—Å—Ö–µ–º–∞"
                },
                {
                  "type" : "example",
                  "value" : "–ø—Ä–æ–µ–∑–¥"
                },
                {
                  "type" : "example",
                  "value" : "—Å—Ö–µ–º–∞ –ø—Ä–æ–µ–∑–¥–∞"
                },
                {
                  "type" : "example",
                  "value" : "–∫–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å"
                },
                {
                  "type" : "example",
                  "value" : "–ø—Ä–æ–µ—Ö–∞—Ç—å"
                },
                {
                  "type" : "example",
                  "value" : "–∫–∞–∫ –Ω–∞–π—Ç–∏"
                },
                {
                  "type" : "example",
                  "value" : "–Ω–∞–π—Ç–∏"
                },
                {
                  "type" : "example",
                  "value" : "–ø–æ–¥—Ä–æ–±–Ω–µ–µ"
                }
              ],
              "then" : "/newNode_103"
            }
          ]
        }
    state: newNode_94
        state: 1
            e: —Å–ø–∞—Å–∏–±–æ

            go!: /newNode_179

        state: 2
            e: —Å—Ö–µ–º–∞
            e: –ø—Ä–æ–µ–∑–¥
            e: —Å—Ö–µ–º–∞ –ø—Ä–æ–µ–∑–¥–∞
            e: –∫–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å
            e: –ø—Ä–æ–µ—Ö–∞—Ç—å
            e: –∫–∞–∫ –Ω–∞–π—Ç–∏
            e: –Ω–∞–π—Ç–∏
            e: –ø–æ–¥—Ä–æ–±–Ω–µ–µ

            go!: /newNode_103

        state: Fallback
            q: *
            go!: /newNode_91
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_94",
                name: "newNode_94 buttons",
                handler: function($context) {
                }
            });

    state: newNode_73
        if: $session.name && $session.name.firstName && $session.name.recognized
            go!: /newNode_15
        elseif: $session.name && $session.name.firstName && $session.name.surName && $session.name.patrName && !$session.name.recognized
            go!: /newNode_107
        elseif: $session.name && $session.name.firstName && $session.name.surName && !$session.name.recognized
            go!: /newNode_108
        else:
            go!: /newNode_106

    state: newNode_92
        random:
            a:  {{$session.name.firstName}}, —Å–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã!
                –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –í —Å–ª—É—á–∞–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π! üôÇ
        go!: /newNode_93
    @IntentGroup
        {
          "boundsTo" : "/newNode_92",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [ ]
            }
          ],
          "global" : false,
          "fallback" : "",
          "intents" : [
            {
              "phrases" : [
                {
                  "type" : "pattern",
                  "value" : "*"
                }
              ],
              "then" : "/newNode_92"
            }
          ]
        }
    state: newNode_93
        state: 1
            q: *

            go!: /newNode_92
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_93",
                name: "newNode_93 buttons",
                handler: function($context) {
                }
            });

    state: newNode_96
        random:
            a: –î–æ–∂–¥–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç–∞ –æ—Ç –õ`–≠—Ç–∞—É–ª—å, —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–≤–æ–π –æ—Ç–∫–ª–∏–∫.
        go!: /newNode_116
    @IntentGroup
        {
          "boundsTo" : "/newNode_96",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [ ]
            }
          ],
          "global" : false,
          "fallback" : "",
          "intents" : [
            {
              "phrases" : [
                {
                  "type" : "pattern",
                  "value" : "*"
                }
              ],
              "then" : "/newNode_96"
            }
          ]
        }
    state: newNode_116
        state: 1
            q: *

            go!: /newNode_96
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_116",
                name: "newNode_116 buttons",
                handler: function($context) {
                }
            });

    state: newNode_179
        random:
            a: –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å üôÇ
        go!: /newNode_180
    @IntentGroup
        {
          "boundsTo" : "/newNode_179",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [ ]
            }
          ],
          "global" : false,
          "fallback" : "/newNode_91",
          "intents" : [
            {
              "phrases" : [
                {
                  "type" : "pattern",
                  "value" : "*"
                }
              ],
              "then" : "/newNode_179"
            },
            {
              "phrases" : [
                {
                  "type" : "example",
                  "value" : "—Å—Ö–µ–º–∞"
                },
                {
                  "type" : "example",
                  "value" : "–ø—Ä–æ–µ–∑–¥"
                },
                {
                  "type" : "example",
                  "value" : "—Å—Ö–µ–º–∞ –ø—Ä–æ–µ–∑–¥–∞"
                },
                {
                  "type" : "example",
                  "value" : "–∫–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å"
                },
                {
                  "type" : "example",
                  "value" : "–ø—Ä–æ–µ—Ö–∞—Ç—å"
                },
                {
                  "type" : "example",
                  "value" : "–∫–∞–∫ –Ω–∞–π—Ç–∏"
                },
                {
                  "type" : "example",
                  "value" : "–Ω–∞–π—Ç–∏"
                },
                {
                  "type" : "example",
                  "value" : "–ø–æ–¥—Ä–æ–±–Ω–µ–µ"
                }
              ],
              "then" : "/newNode_103"
            }
          ]
        }
    state: newNode_180
        state: 1
            q: *

            go!: /newNode_179

        state: 2
            e: —Å—Ö–µ–º–∞
            e: –ø—Ä–æ–µ–∑–¥
            e: —Å—Ö–µ–º–∞ –ø—Ä–æ–µ–∑–¥–∞
            e: –∫–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å
            e: –ø—Ä–æ–µ—Ö–∞—Ç—å
            e: –∫–∞–∫ –Ω–∞–π—Ç–∏
            e: –Ω–∞–π—Ç–∏
            e: –ø–æ–¥—Ä–æ–±–Ω–µ–µ

            go!: /newNode_103

        state: Fallback
            q: *
            go!: /newNode_91
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_180",
                name: "newNode_180 buttons",
                handler: function($context) {
                }
            });

    state: newNode_103
        random:
            a:  –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ö–µ–º–∞ –ø—Ä–æ–µ–∑–¥–∞ (–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä, –¥. 28, –∫.1):
                –º. –ß–µ—Ä—Ç–∞–Ω–æ–≤—Å–∫–∞—è, –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞–≥–æ–Ω –∏–∑ —Ü–µ–Ω—Ç—Ä–∞.
                –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –ø–æ —ç—Å–∫–∞–ª–∞—Ç–æ—Ä—É. –ü–æ—Å–ª–µ —Å—Ç–µ–∫–ª—è–Ω–Ω—ã—Ö –¥–≤–µ—Ä–µ–π –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–æ –∏ –∏–¥–µ–º –ø–æ –ø–æ–¥–∑–µ–º–Ω–æ–º—É –ø–µ—Ä–µ—Ö–æ–¥—É. –í –∫–æ–Ω—Ü–µ –ø–µ—Ä–µ—Ö–æ–¥–∞  -  —Ç–æ–∂–µ –Ω–∞–ø—Ä–∞–≤–æ. –í—ã—Ö–æ–¥–∏–º –Ω–∞ –°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä (—Å–ø—Ä–∞–≤–∞ —Ç—Ä–∞–º–≤–∞–π–Ω—ã–µ –ø—É—Ç–∏).
        random:
            a: –ò–¥–µ–º –ø—Ä—è–º–æ, –¥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–æ –°—Ç–∞—Ä–æ–±–∞–ª–∞–∫–ª–∞–≤—Å–∫–æ–π —É–ª–∏—Ü–µ–π. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –µ–µ –ø–æ –Ω–∞–∑–µ–º–Ω–æ–º—É –ø–µ—Ä–µ—Ö–æ–¥—É. –õ–µ–≤–µ–µ –≤–∏–¥–∏–º –ø–∞—Ä–∫–æ–≤–∫—É. –ó–∞ –Ω–µ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–¥–∞–Ω–∏–µ –∫–æ—Ç—Ç–µ–¥–∂–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å –∫—Ä–∞—Å–Ω–æ–π –∫—Ä—ã—à–µ–π. –í—Ö–æ–¥ –≤ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫—É—é –¥–≤–µ—Ä—å –¥–≤—É—Ö—ç—Ç–∞–∂–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞.
        image: https://248305.selcdn.ru/zfl_prod/81737966/81737969/zzCcrjY6CHbhWstn.png
        random:
            a: –¢–∞–∫–∂–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —è –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–ª –≤ —Å–º—Å.
        go!: /newNode_104
    @IntentGroup
        {
          "boundsTo" : "/newNode_103",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [ ]
            }
          ],
          "global" : false,
          "fallback" : "/newNode_91",
          "intents" : [
            {
              "phrases" : [
                {
                  "type" : "example",
                  "value" : "—Å—Ö–µ–º–∞"
                },
                {
                  "type" : "example",
                  "value" : "–ø—Ä–æ–µ–∑–¥"
                },
                {
                  "type" : "example",
                  "value" : "—Å—Ö–µ–º–∞ –ø—Ä–æ–µ–∑–¥–∞"
                },
                {
                  "type" : "example",
                  "value" : "–∫–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å"
                },
                {
                  "type" : "example",
                  "value" : "–ø—Ä–æ–µ—Ö–∞—Ç—å"
                },
                {
                  "type" : "example",
                  "value" : "–∫–∞–∫ –Ω–∞–π—Ç–∏"
                },
                {
                  "type" : "example",
                  "value" : "–Ω–∞–π—Ç–∏"
                },
                {
                  "type" : "example",
                  "value" : "–ø–æ–¥—Ä–æ–±–Ω–µ–µ"
                }
              ],
              "then" : "/newNode_103"
            }
          ]
        }
    state: newNode_104
        state: 1
            e: —Å—Ö–µ–º–∞
            e: –ø—Ä–æ–µ–∑–¥
            e: —Å—Ö–µ–º–∞ –ø—Ä–æ–µ–∑–¥–∞
            e: –∫–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å
            e: –ø—Ä–æ–µ—Ö–∞—Ç—å
            e: –∫–∞–∫ –Ω–∞–π—Ç–∏
            e: –Ω–∞–π—Ç–∏
            e: –ø–æ–¥—Ä–æ–±–Ω–µ–µ

            go!: /newNode_103

        state: Fallback
            q: *
            go!: /newNode_91
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_104",
                name: "newNode_104 buttons",
                handler: function($context) {
                }
            });

    state: newNode_107
        random:
            a:  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —Ç–≤–æ–∏:
                –§–∞–º–∏–ª–∏—è - {{$session.name.surName}}
                –ò–º—è - {{$session.name.firstName}}
                –û—Ç—á–µ—Å—Ç–≤–æ - {{$session.name.patrName}}
        go!: /newNode_127
    @IntentGroup
        {
          "boundsTo" : "/newNode_107",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [
                {
                  "name" : "–î–∞",
                  "transition" : ""
                },
                {
                  "name" : "–ù–µ—Ç",
                  "transition" : ""
                }
              ]
            }
          ],
          "global" : false,
          "fallback" : "/newNode_107",
          "intents" : [
            {
              "phrases" : [
                {
                  "type" : "example",
                  "value" : "$yes"
                }
              ],
              "then" : "/newNode_15"
            },
            {
              "phrases" : [
                {
                  "type" : "example",
                  "value" : "$no"
                }
              ],
              "then" : "/newNode_106"
            }
          ]
        }
    state: newNode_127
        state: 1
            e: $yes

            go!: /newNode_15

        state: 2
            e: $no

            go!: /newNode_106

        state: Fallback
            q: *
            go!: /newNode_107
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_127",
                name: "newNode_127 buttons",
                handler: function($context) {
                  $reactions.buttons([
                    {text: "–î–∞"
                    },
                    {text: "–ù–µ—Ç"
                    },
                  ]);
                }
            });

    state: newNode_108
        random:
            a:  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —Ç–≤–æ–∏:
                –§–∞–º–∏–ª–∏—è - {{$session.name.surName}}
                –ò–º—è - {{$session.name.firstName}}
        go!: /newNode_128
    @IntentGroup
        {
          "boundsTo" : "/newNode_108",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [
                {
                  "name" : "–î–∞",
                  "transition" : ""
                },
                {
                  "name" : "–ù–µ—Ç",
                  "transition" : ""
                }
              ]
            }
          ],
          "global" : false,
          "fallback" : "/newNode_108",
          "intents" : [
            {
              "phrases" : [
                {
                  "type" : "example",
                  "value" : "$yes"
                }
              ],
              "then" : "/newNode_15"
            },
            {
              "phrases" : [
                {
                  "type" : "example",
                  "value" : "$no"
                }
              ],
              "then" : "/newNode_106"
            }
          ]
        }
    state: newNode_128
        state: 1
            e: $yes

            go!: /newNode_15

        state: 2
            e: $no

            go!: /newNode_106

        state: Fallback
            q: *
            go!: /newNode_108
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_128",
                name: "newNode_128 buttons",
                handler: function($context) {
                  $reactions.buttons([
                    {text: "–î–∞"
                    },
                    {text: "–ù–µ—Ç"
                    },
                  ]);
                }
            });

    state: newNode_131
        random:
            a: –°–ø–∞—Å–∏–±–æ.
        go!: /newNode_139
    @Transition
        {
          "boundsTo" : "/newNode_131",
          "then" : "/newNode_18"
        }
    state: newNode_139
        go!: /newNode_18

    state: newNode_140
        random:
            a: –ü–æ–Ω—è–ª üôÇ
        go!: /newNode_115
    @Transition
        {
          "boundsTo" : "/newNode_140",
          "then" : "/newNode_23"
        }
    state: newNode_115
        go!: /newNode_23

    state: newNode_146
        random:
            a: üôÇ
        go!: /newNode_147
    @Transition
        {
          "boundsTo" : "/newNode_146",
          "then" : "/newNode_85"
        }
    state: newNode_147
        go!: /newNode_85

    state: newNode_133
        if: $session.score >= 100
            go!: /newNode_120
        else:
            go!: /newNode_134

    state: newNode_61
        random:
            a: –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∞ –¥–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è...
        go!: /newNode_63
    @Transition
        {
          "boundsTo" : "/newNode_61",
          "then" : "/newNode_57"
        }
    state: newNode_63
        go!: /newNode_57

    state: newNode_62
        random:
            a: –ò–∑–≤–∏–Ω–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –µ—â–µ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.
        go!: /newNode_64
    @Transition
        {
          "boundsTo" : "/newNode_62",
          "then" : "/newNode_57"
        }
    state: newNode_64
        go!: /newNode_57

    state: newNode_68
        random:
            a: –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è...
        go!: /newNode_72
    @Transition
        {
          "boundsTo" : "/newNode_68",
          "then" : "/newNode_65"
        }
    state: newNode_72
        go!: /newNode_65

    state: newNode_70
        random:
            a: –ò–∑–≤–∏–Ω–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –µ—â–µ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.
        go!: /newNode_71
    @Transition
        {
          "boundsTo" : "/newNode_70",
          "then" : "/newNode_65"
        }
    state: newNode_71
        go!: /newNode_65

    state: newNode_75
        random:
            a: –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –∑–∞–ø–∏—Å–∞—Ç—å —Ç–µ–±—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.
        go!: /newNode_76
    @IntentGroup
        {
          "boundsTo" : "/newNode_75",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [
                {
                  "name" : "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ",
                  "transition" : "/newNode_60"
                }
              ]
            }
          ],
          "global" : false,
          "fallback" : "/newNode_75",
          "intents" : [
            {
              "phrases" : [
                {
                  "type" : "example",
                  "value" : "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ"
                }
              ],
              "then" : "/newNode_60"
            }
          ]
        }
    state: newNode_76
        state: 1
            e: –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ

            go!: /newNode_60

        state: Fallback
            q: *
            go!: /newNode_75
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_76",
                name: "newNode_76 buttons",
                handler: function($context) {
                  $reactions.buttons([
                    {text: "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ"
                    , transition: "/newNode_60"
                    },
                  ]);
                }
            });

    state: newNode_77
        random:
            a:  –û—Ç–ª–∏—á–Ω–æ, –º—ã –±—É–¥–µ–º –∂–¥–∞—Ç—å —Ç–µ–±—è {{$session.job_interview.date}} –≤ {{$session.job_interview.time}}.
                –ú—ã –∂–¥—ë–º —Ç–µ–±—è –ø–æ –∞–¥—Ä–µ—Å—É: –≥.–ú–æ—Å–∫–≤–∞, –°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä, –¥. 28, –∫.1.
                –ü—É—Ç—å –æ—Ç –º–µ—Ç—Ä–æ –ß–µ—Ä—Ç–∞–Ω–æ–≤—Å–∫–∞—è –∑–∞–π–º–µ—Ç –Ω–µ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç.
                –ü—Ä–∏—Ö–æ–¥–∏ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ, –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üôÇ
        random:
            a: –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É, –∑–≤–æ–Ω–∏: 8(495) 937-07-29 –∏–ª–∏ 8-916-690-73-65
        go!: /newNode_82
    @Transition
        {
          "boundsTo" : "/newNode_77",
          "then" : "/newNode_83"
        }
    state: newNode_82
        go!: /newNode_83
    @HttpRequest
        {
          "boundsTo" : "",
          "title" : "–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–º—Å",
          "actions" : [
            {
              "type" : "buttons",
              "buttons" : [ ]
            }
          ],
          "url" : "https://hh.aimylogic.com/sms",
          "method" : "POST",
          "dataType" : "json",
          "body" : "{\r\n    \"phone\": \"{{$session.phone}}\",\r\n    \"message\": \"–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –≤ –õ`–≠—Ç—É–∞–ª—å {{$session.job_interview.date}} –≤ {{$session.job_interview.time}}. –ê–¥—Ä–µ—Å: https://bitly.su/9MvrHt\"\r\n}\r\n",
          "okState" : "/newNode_103",
          "errorState" : "/newNode_103",
          "timeout" : 0,
          "headers" : [ ],
          "vars" : [ ]
        }
    state: newNode_83
        script:
            var headers = {
            };
            var result = $http.query("https://hh.aimylogic.com/sms", {
                method: "POST",
                headers: headers,
                query: $session,
                body: _.template("{\r    \"phone\": \"{{$session.phone}}\",\r    \"message\": \"–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –≤ –õ`–≠—Ç—É–∞–ª—å {{$session.job_interview.date}} –≤ {{$session.job_interview.time}}. –ê–¥—Ä–µ—Å: https://bitly.su/9MvrHt\"\r}\r", {variable: '$session'})($session),
                dataType: "json",
                timeout: 0 || 10000
            });
            var $httpResponse = result.data;
            $session.httpStatus = result.status;
            $session.httpResponse = $httpResponse;
            if (result.isOk && result.status >= 200 && result.status < 300) {
                $reactions.transition("/newNode_103");
            } else {
                $reactions.transition("/newNode_103");
            }
        init:
            $jsapi.bind({
                type: "postProcess",
                path: "/newNode_83",
                name: "newNode_83 buttons",
                handler: function($context) {
                }
            });
